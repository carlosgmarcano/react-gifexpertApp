{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getDifs","category","a","URL","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAa5C,OACI,0BAAMC,SANW,SAACC,GAClBA,EAAEC,iBACwB,KAAtBJ,EAAWK,QACfP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,SAIlC,2BACIC,KAAK,OACLC,MAAOR,EACPS,SAdc,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,YCShBG,EAfK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAIzB,OACI,yBAAKC,UAAU,2BACX,yBACIC,IAAKF,EACLG,IAAMJ,IAEV,2BAAIA,K,uBCZHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAKD,EAAIC,GACTjB,MAAOgB,EAAIhB,MACXC,IAAG,UAAGe,EAAIE,cAAP,aAAG,EAAYC,iBAAiBlB,QARxB,kBAWZa,GAXY,4CAAH,sDCKPM,EAAU,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZnB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OATAC,qBAAU,WACNnB,EAAQC,GAAUmB,MAAK,SAAAC,GACfH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGvB,CAACf,IAEIgB,EDViBK,CAAcrB,GAA/BO,EAF4B,EAE5BA,KAAMQ,EAFsB,EAEtBA,QAEb,OACI,oCACI,4BAAKf,GACJe,GAAW,0CACZ,yBAAKnB,UAAW,aAERW,EAAKE,KAAK,SAAAC,GAAG,OACT,kBAAC,EAAD,eACIY,IAAOf,EAAKI,IACRD,UEIjBa,EAlBM,WAAO,IAAD,EAEa1C,mBAAS,IAFtB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAIvB,OACI,6BACI,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BACA,4BAEQ4C,EAAWf,KAAK,SAAAT,GAAQ,OAAI,kBAAC,EAAD,CAASA,SAAYA,UCVrEyB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.c2a9130f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setcategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim() === '') return;\r\n        setcategories(cats => [inputValue, ...cats]) \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange= {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories : PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n\r\n    //console.log();\r\n\r\n    return (\r\n        <div className=\"card animate__heartBeat\">\r\n            <img \r\n                src={url}\r\n                alt= {title}\r\n            />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","export const getDifs = async(category) => {\r\n    const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=FtIfctjiH1lsHeaEOODZI7SVgT1aI4xo`\r\n    const resp = await fetch(URL);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id : img.id,\r\n            title: img.title,\r\n            url : img.images?.downsized_medium.url \r\n        }\r\n    })\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data, loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Cargando...</p>}\r\n            <div className =\"card-grid\">\r\n                {\r\n                    data.map( img => (\r\n                        <GifGridItem \r\n                            key = {data.id}    \r\n                            {...img} //Enviar como propiedades independientes\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import {useState, useEffect} from 'react';\r\nimport { getDifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n        getDifs(category).then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n        })\r\n    },[category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setcategories] = useState([])\r\n    \r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategories = {setcategories}/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => <GifGrid category = {category}/>)\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}